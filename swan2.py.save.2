from flask import Flask,render_template,flash, redirect,url_for,session,logging,request,jsonify,Response
import json
import mysql.connector
import hashlib
import random
import time
import os
from datetime import datetime
app = Flask(__name__)

@app.route("/")
def frontpage():
    return render_template("frontpage.html")


@app.route("/online")
def index():
    return render_template("index.html")
@app.route("/offline")
def offline():



@app.route("/login",methods=["GET", "POST"])
def login():
    if request.method == "POST":
        uname = request.form["uname"]
        passw = request.form["passw"]
        mydb = mysql.connector.connect(
        host="10.14.79.58",
        user="root",
        passwd="12345",
        database="PATIENT")

        mycursor = mydb.cursor()
        mycursor.execute('SELECT * FROM PERSONAL_INFO WHERE Name = %s AND Password = %s', (uname, passw))
        # Fetch one record and return result
        account = mycursor.fetchone()
        mydb.commit()
        # If account exists in accounts table in out database
        if account:
            # Create session data, we can access this data in other routes
            #session['loggedin'] = True
            #session['id'] = account['id']
            #session['username'] = account['username']
            # Redirect to home page

         
           # while(1):
        
                #mydb = mysql.connector.connect(
                #host="10.14.79.58",
                #user="root",
                #passwd="12345",
                #database="PATIENT")

                #mycursor = mydb.cursor()
                #hashkey="1234"
                #gender="Male"
                #age="25"
                #temp="98"
                #hr="72"
                #sys="67"
                #dia="90"
                #spo2="100"
                #ci='5'
                #PATIENT = "INSERT INTO MEDICAL_INFO (Hashkey,Gender,Age,Temperature,HeartRate,Systole,Diastole,Spo2,CriticalIndex) VALUES (%s,%s, %s, %s, %s, %s, %s, %s, %s)"
                #val = (hashkey,gender,age,temp,hr,sys,dia,spo2,ci)
                #mycursor.execute(PATIENT, val)

                #mydb.commit()



            return render_template('details.html')

        else:
            return render_template('index.html')

        #login = user.query.filter_by(username=uname, password=passw).first()
        #if login is not None:
            #return redirect(url_for("index"))
    return render_template("login.html")
@app.route("/register", methods=["GET", "POST"])
def register():
    if request.method == "POST":
        uname = request.form['uname']
        utype = request.form['utype']
        mail = request.form['mail']
        phn = request.form['phn']
        gender = request.form['gender']
        age = request.form['age']
        passw = request.form['passw']
        
        #x = hashlib.sha1(str.encode(uname+gender+phn))
        hashkey=hash(uname+mail+phn)
        #hashkey = x.hexdigest()
        mydb = mysql.connector.connect(
        host="10.14.79.58",
        user="root",
        passwd="12345",
        database="PATIENT")

        mycursor = mydb.cursor()

        PATIENT = "INSERT INTO PERSONAL_INFO (Hashkey,UserType,Name,Email,PhoneNo,Gender,Age,Password) VALUES (%s, %s, %s, %s, %s, %s, %s, %s)"
        val = (hashkey,utype,uname,mail,phn,gender,age,passw)
        mycursor.execute(PATIENT, val)

        mydb.commit()
        return render_template('details.html')

    return render_template("register.html")
@app.route("/details")
def details():
    return render_template("details.html")
@app.route("/start")
def start():
    graph_data = open('example.txt','r').read()
    lines = graph_data.split('\n')
    xs = []
    ys = []
    for line in lines:
        if len(line) > 1:
            mydb = mysql.connector.connect(
            host="10.14.79.58",
            user="root",
            passwd="12345",
            database="PATIENT")

            mycursor = mydb.cursor()
            hashkey,gender,age,temp,hr,sys,dia,spo2,ci=line.split(',')
                #hashkey="1234"
                #gender="Male"
                #age="25"
                #temp="98"
                #hr="72"
                #sys="67"
                #dia="90"
                #spo2="100"
                #ci='5'
            PATIENT = "INSERT INTO MEDICAL_INFO (Hashkey,Gender,Age,Temperature,HeartRate,Systole,Diastole,Spo2,CriticalIndex) VALUES (%s,%s, %s, %s,%s,%s,%s,%s,%s)"
            val = (hashkey,gender,age,temp,hr,sys,dia,spo2,ci)
            mycursor.execute(PATIENT, val)

            mydb.commit()

    
    return 'Data uploaded Successfully'
@app.route("/heartrate")
def heartrate():
    return render_template('heartrate.html')


@app.route('/heartratedata', methods=["GET"])
def heartratedata():
    def generate_heartrate_data():
        graph_data = open('spo2.txt','r').read()
        lines = graph_data.split('\n')
        xs = []
        ys = []
        for line in lines:
            if len(line) > 1:
                x, y,z= line.split(',')
                xs.append(int(x))
                ys.append(int(y))
        #while True:
                json_data = json.dumps(
                    {'time': datetime.now().strftime('%Y-%m-%d %H:%M:%S'), 'value': int(y)})
                yield f"data:{json_data}\n\n"
                time.sleep(1)

    return Response(generate_heartrate_data(), mimetype='text/event-stream')
@app.route("/temperature")
def temperature():
    return render_template('temperature.html')


@app.route('/temperaturedata', methods=["GET"])
def temperaturedata():
    def generate_temperature_data():
        graph_data = open('spo2.txt','r').read()
        lines = graph_data.split('\n')
        xs = []
        ys = []
        for line in lines:   
            if len(line) > 1:
                x, y,z= line.split(',')
                xs.append(int(x))
                ys.append(int(y))
        #while True:
                json_data = json.dumps(
                    {'time': datetime.now().strftime('%Y-%m-%d %H:%M:%S'), 'value': float(z)})
                yield f"data:{json_data}\n\n"
                time.sleep(1)

    return Response(generate_temperature_data(), mimetype='text/event-stream')
@app.route("/ecg")
def ecg():
    return render_template('ecg.html')


@app.route('/ecgdata', methods=["GET"])
def ecgdata():
    def generate_ecg_data():
        graph_data = open('example.txt','r').read()
        lines = graph_data.split('\n')
        xs = []
        ys = []
        for line in lines:   
            if len(line) > 1:
                x, y,a,b,c,d,e,f,g = line.split(',')
                xs.append(int(x))
                ys.append(int(y))
        #while True:
                json_data = json.dumps(
                    {'time': datetime.now().strftime('%Y-%m-%d %H:%M:%S'), 'value': int(y)})
                yield f"data:{json_data}\n\n"
                time.sleep(1)

    return Response(generate_ecg_data(), mimetype='text/event-stream')
@app.route("/spo2")
def spo2():
    return render_template('spo2.html')


@app.route('/spo2data', methods=["GET"])
def spo2data():
    def generate_spo2_data():
        graph_data = open('spo2.txt','r').read()
        lines = graph_data.split('\n')
        xs = []
        ys = []
        for line in lines:   
            if len(line) > 1:
                x, y,z = line.split(',')
                xs.append(int(x))
                ys.append(int(y))
        #while True:
                json_data = json.dumps(
                    {'time': datetime.now().strftime('%Y-%m-%d %H:%M:%S'), 'value': int(x)})
                yield f"data:{json_data}\n\n"
                time.sleep(1)

    return Response(generate_spo2_data(), mimetype='text/event-stream')
@app.route("/bloodpressure")
def bloodpressure():
    return render_template('bloodpressure.html')


@app.route('/bloodpressuredata', methods=["GET"])
def bloodpressuredata():
    def generate_bloodpressure_data():
        graph_data = open('BP.txt','r').read()
        lines = graph_data.split('\n')
        xs = []
        ys = []
        for line in lines:   
            if len(line) > 1:
                x, y= line.split(',')
                xs.append(int(x))
                ys.append(int(y))
        #while True:
                json_data = json.dumps(
                    {'time': datetime.now().strftime('%Y-%m-%d %H:%M:%S'), 'value': int(y)})
                yield f"data:{json_data}\n\n"
                time.sleep(1)

    return Response(generate_bloodpressure_data(), mimetype='text/event-stream')
@app.route("/criticalindex")
def criticalindex():
    return render_template('crticalindex.html')


@app.route('/criticalindexdata', methods=["GET"])
def criticalindexdata():
    def generate_crticalindex_data():
        graph_data = open('example.txt','r').read()
        lines = graph_data.split('\n')
        xs = []
        ys = []
        for line in lines:
            if len(line) > 1:
                x, y,a,b,c,d,e,f,g = line.split(',')
                xs.append(int(x))
                ys.append(int(y))
        #while True:
                json_data = json.dumps(
                    {'time': datetime.now().strftime('%Y-%m-%d %H:%M:%S'), 'value': int(y)})
                yield f"data:{json_data}\n\n"
                time.sleep(1)

    return Response(generate_crticalindex_data(), mimetype='text/event-stream')
@app.route("/enrollfingerprint")
def enrollfingerprint():
    os.system('python3 grabserial_BP >> ECG.txt')
    return 'success'
@app.route("/stop")
def stop():
    os._exit(0)
    return 'Fingerprint Enrolled Successfully'


if __name__ == '__main__':
    app.run(debug=True, threaded=True)
